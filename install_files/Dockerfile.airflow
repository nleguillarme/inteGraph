# Custom Dockerfile

FROM apache/airflow

# Install dependencies
# It's more efficient to do pip install here than adding a requirements.txt

USER root

#RUN apt-get update -yqq \
#    && apt-get upgrade -yqq \
#    && apt-get install -yqq --no-install-recommends gcc aptitude
#    && curl -sL https://deb.nodesource.com/setup_10.x | bash - \
#    && aptitude install -y nodejs npm \
#    && npm i -g @rmlio/yarrrml-parser \
#    && mkdir -p /usr/share/man/man1 \
#    && apt-get install -yqq --no-install-recommends openjdk-11-jdk

# RUN pip install --upgrade pip
#RUN pip install --requirement /tmp/requirements.txt

# This fixes permission issues on linux.
# The airflow user should have the same UID as the user running docker on the host system.
ARG DOCKER_UID
ARG DOCKER_GID
RUN \
    : "${DOCKER_UID:?Build argument DOCKER_UID needs to be set and non-empty. Use 'make build' to set it automatically.}" \
    && usermod -u ${DOCKER_UID} airflow \
    && echo "Set airflow's uid to ${DOCKER_UID}" \
    && groupadd -g ${DOCKER_GID} docker \
    && usermod -aG docker airflow

RUN usermod -aG root airflow

# Give the airflow user sudo privileges in order to be able to run Docker commands inside the container
RUN echo "airflow ALL=NOPASSWD: ALL" >> /etc/sudoers

RUN chgrp -R 0 /opt/airflow/ && chmod -R g+rwX /opt/airflow/
RUN chown -R airflow: /opt/airflow/

COPY scripts/entrypoint.sh /opt/airflow/entrypoint.sh
RUN chmod a+x /opt/airflow/entrypoint.sh

USER airflow

COPY requirements.txt /requirements.txt
RUN pip install --upgrade pip
RUN pip install --user -r /requirements.txt

ENTRYPOINT ["./entrypoint.sh"]
CMD ["webserver"] # set default arg for entrypoint
