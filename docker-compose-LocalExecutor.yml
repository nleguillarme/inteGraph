version: '2.1'

services:

    nomer:
      build:
        context: ${INTEGRAPH__INSTALL__INSTALL_DIR}
        dockerfile: Dockerfile.nomer
      image: nomer:latest

    gnparser:
      #build: https://github.com/gnames/gnparser.git
      image: gnames/gognparser:latest

    yarrrml-parser:
      build: https://github.com/RMLio/yarrrml-parser.git
      image: yarrrml-parser:latest

    rmlmapper:
      build: https://github.com/RMLio/rmlmapper-java.git
      image: rmlmapper:latest

    mapeathor:
      image: oegdataintegration/mapeathor:latest

    sdm-rdfizer:
      build: https://github.com/SDM-TIB/SDM-RDFizer.git
      image: rdfizer:latest

    morph-kgc:
      build:
        context: ${INTEGRAPH__INSTALL__INSTALL_DIR}
        dockerfile: Dockerfile.morph
      image: morph-kgc:latest

    # neo4j:
    #     build:
    #       context: .
    #       dockerfile: Dockerfile.neo4j
    #       args:
    #         - USER_UID=1001
    #         - USER_GID=1001
    #     image: neo4j-n10s:latest
    #     environment:
    #         - NEO4J_AUTH=none
    #     ports:
    #         - "7474:7474"
    #         - "7687:7687"
    #     volumes:
    #         - ~/.neo4j/data:/data
    #         - ~/.neo4j/import:/var/lib/neo4j/import
    #         - ~/.neo4j/logs:/logs
    #         - ./config/test/dumps:/dumps

    # virtuoso:
    #     image: tenforce/virtuoso:1.3.1-virtuoso7.2.2
    #     environment:
    #       SPARQL_UPDATE: "true"
    #       DEFAULT_GRAPH: "http://www.example.com/my-graph"
    #       VIRT_Parameters_DirsAllowed: "/data/dumps"
    #     volumes:
    #       - ~/.virtuoso:/data
    #       - ./dags_test_data/shared_dir:/data/dumps
    #     ports:
    #       - "8890:8890"

    # rdfox:
    #   image: oxfordsemantic/rdfox
    #   volumes:
    #     - ${PWD}/RDFox-data/RDFox.lic:/opt/RDFox/RDFox.lic
    #     - ${PWD}/rdfox-server-directory:/home/rdfox/.RDFox
    #   cap_drop:
    #     - ALL
    #   ports:
    #     - "12110:12110"

    # graphdb:
    #   image: ontotext/graphdb:9.8.0-free
    #   volumes:
    #     - ${PWD}/graphdb-data:/opt/graphdb/home
    #   environment:
    #     GDB_JAVA_OPTS: >-
    #       -Xmx12g -Xms12g
    #       -Dgraphdb.home=/opt/graphdb/home
    #       -Dgraphdb.workbench.importDirectory=/opt/graphdb/home/graphdb-import
    #       -Dgraphdb.workbench.cors.enable=true
    #       -Denable-context-index=true
    #       -Dentity-pool-implementation=transactional
    #       -Dhealth.max.query.time.seconds=60
    #       -Dgraphdb.append.request.id.headers=true
    #       -Dreuse.vars.in.subselects=true
    #   ports:
    #     - "7200:7200"

    postgres:
        image: postgres:9.6
        # networks:
        #     - graphdbnet
        environment:
            - POSTGRES_USER=airflow
            - POSTGRES_PASSWORD=airflow
            - POSTGRES_DB=airflow

    webserver:
        build:
          context: ${INTEGRAPH__INSTALL__INSTALL_DIR}
          dockerfile: Dockerfile.airflow
          args:
            - DOCKER_UID=${INTEGRAPH__CONFIG__USER_ID}
            - DOCKER_GID=${INTEGRAPH__CONFIG__DOCKER_GROUP_ID}
        image: custom-airflow
        restart: on-failure
        depends_on:
            - postgres
            - gnparser
            # - yarrrml-parser
            # - rmlmapper
            - nomer
            - mapeathor
            - morph-kgc
        environment:
            - AIRFLOW__CORE__EXECUTOR=LocalExecutor
            - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
            - AIRFLOW__CORE__LOAD_EXAMPLES=False
            - AIRFLOW__SCHEDULER__CATCHUP_BY_DEFAULT=False
            - AIRFLOW__LOGGING__LOGGING_LEVEL=DEBUG
            - AIRFLOW__WEBSERVER__DAG_ORIENTATION=TB
            - AIRFLOW__WEBSERVER__DAG_DEFAULT_VIEW=graph
            - AIRFLOW__WEBSERVER__AUTHENTICATE=False
            - USER_UID=${INTEGRAPH__CONFIG__USER_ID}
            - GROUP_UID=${INTEGRAPH__CONFIG__GROUP_ID}
            - INTEGRAPH__CONFIG__NOMER_CACHE_DIR=${INTEGRAPH__CONFIG__NOMER_CACHE_DIR}
            - INTEGRAPH__CONFIG__HOST_CONFIG_DIR=${INTEGRAPH__CONFIG__HOST_CONFIG_DIR}
            - INTEGRAPH__CONFIG__ROOT_CONFIG_DIR=/opt/airflow/config
            - INTEGRAPH__EXEC__TEST_MODE=${INTEGRAPH__EXEC__TEST_MODE}
            #- AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}"
        volumes:
            - ${INTEGRAPH__CONFIG__HOST_CONFIG_DIR}:/opt/airflow/config
            - ${PWD}:/opt/airflow/dags
            - ${INTEGRAPH__CONFIG__AIRFLOW_LOGS_DIR}:/opt/airflow/logs
            - /var/run/docker.sock:/var/run/docker.sock
            - /usr/bin/docker:/usr/bin/docker
            - /tmp:/tmp
            # Uncomment to include custom plugins
            # - ./plugins:/usr/local/airflow/plugins
        # networks:
        #     - graphdbnet
        ports:
            - "8080:8080"
        command: webserver
        healthcheck:
            test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
            interval: 30s
            timeout: 30s
            retries: 3

# networks:
#   graphdbnet:
#     external: true

# volumes:
#   shared_config:
#     driver: local
#     driver_opts:
#         type: none
#         device: ${INTEGRAPH__CONFIGURATION__CONFIG_DIR} #NOTE needs full path (~ doesn't work)
#         o: bind
